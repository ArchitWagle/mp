DATA SEGMENT
	MSG1 DB 10,13,"1)ADDITION $"
	MSG2 DB 10,13,"2)SUBTRACTION $"
	MSG3 DB 10,13,"3)MULTIPLICATION $"
	MSG4 DB 10,13,"4)DIVISION $"
	MSG5 DB 10,13,"5)EXIT $"
	MSGC DB 10,13,"CHOOSE ONE OF THE ABOVE:$"
	MSG6 DB 10,13,"ENTER 1ST NO: $"
	MSG7 DB 10,13,"ENTER 2ND NO: $"
	MSG8 DB 10,13,"RESULT: $"
	MSG9 DB 10,13,"REMAINDER: $"
	MSG10 DB 10,13,"QUOTIENT: $"
	
	
	CHOICE DB ?
	TEMP DB ?
	TEMP1 DB ?
DATA ENDS

CODE SEGMENT
ASSUME DS:DATA,CS:CODE
START:
;print menu
	MOV AX,DATA
	MOV DS,AX

	LEA DX,MSG1
	MOV AH,09H
	INT 21H

	LEA DX,MSG2
	MOV AH,09H
	INT 21H

	LEA DX,MSG3
	MOV AH,09H
	INT 21H

	LEA DX,MSG4
	MOV AH,09H
	INT 21H

	LEA DX,MSG5
	MOV AH,09H
	INT 21H
	
	LEA DX,MSGC
	MOV AH,09H
	INT 21H

;take input of choice
	MOV AH,01H
	INT 21H
	CALL INPUT
	MOV CHOICE,AL
	


	CMP AL,05H
	JNE LABELINP
	
;Is executed only when 5 is selected
	MOV AH,4CH
	INT 21H	
	
	
;take input 2 variables
LABELINP:
; var 1 from user
	LEA DX,MSG6
	MOV AH,09H
	INT 21H

	MOV AH,01H
	INT 21H
	CALL INPUT

	.386
	ROL AL,04H
	MOV BL,AL

	MOV AH,01H
	INT 21H
	CALL INPUT

	ADD BL,AL
	
;var 2 from user
	LEA DX,MSG7
	MOV AH,09H
	INT 21H

	
	MOV AH,01H
	INT 21H
	CALL INPUT
	
	.386
	ROL AL,04H
	MOV CL,AL

	MOV AH,01H
	INT 21H
	CALL INPUT

	ADD CL,AL
	
;perform op accroding to choice
	MOV AL,CHOICE
	CMP AL,01H
	JE LABELA
	
	MOV AL,CHOICE
	CMP AL,02H
	JE LABELS
	
	MOV AL,CHOICE
	CMP AL,03H
	JE LABELM

	MOV AL,CHOICE
	CMP AL,04H
	JE LABELD



LABELA:	;(add)
;add and store in cl and bl
	ADD BL,CL
	MOV CL,BL
	JMP DISP

LABELS:	;(subt)
	SUB BL,CL
	MOV CL,BL
	JMP DISP

LABELM:	;(multiply)
	MOV AX,0000H
	MOV AL,BL
	MUL CL
	MOV CX,AX
	MOV BX,AX
	MOV CX,AX
	
	LEA DX,MSG8
	MOV AH,09H
	INT 21H
	
	
	
	AND BX,0F000H
	.386
	ROR BX,12H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	MOV BX,CX
	AND BX,0F00H
	.386
	ROR BX,08H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	MOV BX,CX
	AND BX,00F0H
	.386
	ROR BX,04H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	MOV BX,CX
	AND BX,000FH
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H


	MOV AH,4CH
	INT 21H	

LABELD:	;(divide)
	
	MOV AH,0H
	MOV AL,0000H
	MOV BH,0H
	MOV AL,BL
	
	DIV CL
	
	MOV BX,AX
	MOV CX,BX
	
	LEA DX,MSG9
	MOV AH,09H
	INT 21H
	
	AND BX,0F000H
	.386
	ROR BX,12H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	MOV BX,CX
	AND BX,0F00H
	.386
	ROR BX,08H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	LEA DX,MSG10
	MOV AH,09H
	INT 21H
	
	MOV BX,CX
	AND BX,00F0H
	.386
	ROR BX,04H
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H
	
	MOV BX,CX
	AND BX,000FH
	CALL OUTPUT
	MOV DL,BL
	MOV AH,02H
	INT 21H

	
	
	MOV AH,4CH
	INT 21H	
	
	
	
	
	
DISP:	;(display result)
	LEA DX,MSG8
	MOV AH,09H
	INT 21H
	
	AND BL,0F0H
	
	.386
	ROR BL,04H
	CALL OUTPUT
	
	MOV DL,BL
	
	MOV AH,02H
	INT 21H
	
	MOV BL,CL
	AND BL,0FH
	CALL OUTPUT
	MOV DL,BL

	MOV AH,02H
	INT 21H

	MOV AH,4CH
	INT 21H	



INPUT PROC
	CMP AL,41H
	JC L1
	SUB AL,07H
	L1: SUB AL,30H
	RET
ENDP

OUTPUT PROC
	CMP BL,0AH
	JC L2
	ADD BL,07H
	L2: ADD BL,30H
	RET
ENDP

CODE ENDS
END START
